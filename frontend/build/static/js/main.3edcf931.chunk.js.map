{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["submitButton","e","username","password","preventDefault","formData","FormData","append","fetch","method","headers","Content-Type","body","JSON","stringify","then","data","json","console","log","App","_useState","useState","_useState2","Object","slicedToArray","setUsername","_useState3","_useState4","setPassword","react_default","a","createElement","Fragment","className","id","style","marginLeft","value","onChange","target","type","onClick","Boolean","window","location","hostname","match","require","polyfill","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAGMA,UAAa,SAACC,EAAEC,EAASC,GAC7BF,EAAEG,iBACF,IAAMC,EAAS,IAAIC,SACnBD,EAASE,OAAO,WAAWL,GAC3BG,EAASE,OAAO,WAAWJ,GAC3BK,MAAM,0CAA0C,CAC9CC,OAAQ,OACRC,QAAS,CAEPC,eAAgB,qCAElBC,KAEAC,KAAKC,UAAU,CAACZ,WAASC,eAGzBY,KAAM,SAAAC,GAAI,OAAGA,EAAKC,SAAQF,KAAK,SAAAC,GAAI,OAAEE,QAAQC,IAAIH,OAyBtCI,MAtBf,WAAe,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACPnB,EADOqB,EAAA,GACEG,EADFH,EAAA,GAAAI,EAEeL,mBAAS,IAFxBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEPxB,EAFOyB,EAAA,GAEEC,EAFFD,EAAA,GAGb,OACEE,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAME,UAAU,cACdJ,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOG,GAAG,WAAWC,MAAO,CAACC,WAAW,OAAQC,MAAOpC,EAAUqC,SAAU,SAACtC,GAAKyB,EAAYzB,EAAEuC,OAAOF,WAEtGR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOG,GAAG,WAAWC,MAAO,CAACC,WAAW,OAAQC,MAAOnC,EAAUoC,SAAU,SAACtC,GAAK4B,EAAY5B,EAAEuC,OAAOF,WAEtGR,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASN,GAAG,SAASO,QAAS,SAACzC,GAAD,OAAKD,EAAaC,EAAEC,EAASC,KAAxE,cCzBYwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,EAAQ,KAAqBC,WAC7BD,EAAQ,KAAeC,WAEvBC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.3edcf931.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nconst submitButton=(e,username,password)=>{\n  e.preventDefault()\n  const formData=new FormData();\n  formData.append('username',username);\n  formData.append('password',password)\n  fetch('http://localhost:8000/login_autenticate',{\n    method: 'POST',\n    headers: {\n      // 'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: \n    // formData\n    JSON.stringify({username,password})\n  })\n  \n   .then( data =>data.json()).then(data=>console.log(data))\n}\n\nfunction App() {\n  const[username,setUsername]=useState(\"\");\n  const[password,setPassword]=useState(\"\");\n  return (\n    <React.Fragment>\n      <div>\n        <form className=\"login-form\">\n          <div>\n        <label >Username :</label>\n        <input id=\"username\" style={{marginLeft:'5px'}} value={username} onChange={(e)=>{setUsername(e.target.value)}}/>\n        </div>\n        <div>\n        <label >Password :</label>\n        <input id=\"password\" style={{marginLeft:'9px'}} value={password} onChange={(e)=>{setPassword(e.target.value)}}/>\n        </div>\n        <button type=\"submit\" id=\"submit\" onClick={(e)=>submitButton(e,username,password)}>submit</button>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@babel/polyfill\";\nrequire('es6-object-assign').polyfill();\nrequire(\"es6-promise\").polyfill();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}